{"/home/travis/build/npmtest/node-npmtest-epub-gen/test.js":"/* istanbul instrument in package npmtest_epub_gen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-epub-gen/lib.npmtest_epub_gen.js":"/* istanbul instrument in package npmtest_epub_gen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_epub_gen = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_epub_gen = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-epub-gen/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-epub-gen && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_epub_gen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_epub_gen\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_epub_gen.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_epub_gen.rollup.js'] =\n            local.assetsDict['/assets.npmtest_epub_gen.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_epub_gen.__dirname + '/lib.npmtest_epub_gen.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-epub-gen/node_modules/epub-gen/index.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = require(\"./lib\");\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-epub-gen/node_modules/epub-gen/lib/index.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var EPub, Q, _, archiver, cheerio, ejs, entities, fs, fsextra, mime, path, removeDiacritics, request, rimraf, uslug, uuid,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  path = require(\"path\");\n\n  fs = require(\"fs\");\n\n  Q = require(\"q\");\n\n  _ = require(\"underscore\");\n\n  uslug = require(\"uslug\");\n\n  ejs = require(\"ejs\");\n\n  cheerio = require(\"cheerio\");\n\n  entities = require(\"entities\");\n\n  request = require(\"superagent\");\n\n  fsextra = require(\"fs-extra\");\n\n  removeDiacritics = require(\"diacritics\").remove;\n\n  mime = require(\"mime\");\n\n  archiver = require(\"archiver\");\n\n  rimraf = require(\"rimraf\");\n\n  uuid = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r;\n      r = Math.random() * 16 | 0;\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n\n  EPub = (function() {\n    function EPub(options, output) {\n      var self;\n      this.options = options;\n      self = this;\n      this.defer = new Q.defer();\n      if (output) {\n        this.options.output = output;\n      }\n      if (!this.options.output) {\n        console.error(new Error(\"No Output Path\"));\n        this.defer.reject(new Error(\"No output path\"));\n        return;\n      }\n      if (!options.title || !options.content) {\n        console.error(new Error(\"Title and content are both required\"));\n        this.defer.reject(new Error(\"Title and content are both required\"));\n        return;\n      }\n      this.options = _.extend({\n        description: options.title,\n        publisher: \"anonymous\",\n        author: [\"anonymous\"],\n        tocTitle: \"Table Of Contents\",\n        appendChapterTitles: true,\n        date: new Date().toISOString(),\n        lang: \"en\",\n        fonts: [],\n        customOpfTemplatePath: null,\n        customNcxTocTemplatePath: null,\n        customHtmlTocTemplatePath: null,\n        version: 3\n      }, options);\n      if (this.options.version === 2) {\n        this.options.docHeader = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"\" + self.options.lang + \"\\\">\";\n      } else {\n        this.options.docHeader = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE html>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"\" + self.options.lang + \"\\\">\";\n      }\n      if (_.isString(this.options.author)) {\n        this.options.author = [this.options.author];\n      }\n      if (_.isEmpty(this.options.author)) {\n        this.options.author = [\"anonymous\"];\n      }\n      if (!this.options.tempDir) {\n        this.options.tempDir = path.resolve(__dirname, \"../tempDir/\");\n      }\n      this.id = uuid();\n      this.uuid = path.resolve(this.options.tempDir, this.id);\n      this.options.uuid = this.uuid;\n      this.options.id = this.id;\n      this.options.images = [];\n      this.options.content = _.map(this.options.content, function(content, index) {\n        var $, allowedAttributes, allowedXhtml11Tags, titleSlug;\n        if (!content.filename) {\n          titleSlug = uslug(removeDiacritics(content.title || \"no title\"));\n          content.href = index + \"_\" + titleSlug + \".xhtml\";\n          content.filePath = path.resolve(self.uuid, \"./OEBPS/\" + index + \"_\" + titleSlug + \".xhtml\");\n        } else {\n          content.href = content.filename.match(/\\.xhtml$/) ? content.filename : content.filename + \".xhtml\";\n          console.log(content.href);\n          if (content.filename.match(/\\.xhtml$/)) {\n            content.filePath = path.resolve(self.uuid, \"./OEBPS/\" + content.filename);\n          } else {\n            content.filePath = path.resolve(self.uuid, \"./OEBPS/\" + content.filename + \".xhtml\");\n          }\n        }\n        content.id = \"item_\" + index;\n        content.dir = path.dirname(content.filePath);\n        content.excludeFromToc || (content.excludeFromToc = false);\n        content.beforeToc || (content.beforeToc = false);\n        content.author = content.author && _.isString(content.author) ? [content.author] : !content.author || !_.isArray(content.author) ? [] : content.author;\n        allowedAttributes = [\"content\", \"alt\", \"id\", \"title\", \"src\", \"href\", \"about\", \"accesskey\", \"aria-activedescendant\", \"aria-atomic\", \"aria-autocomplete\", \"aria-busy\", \"aria-checked\", \"aria-controls\", \"aria-describedat\", \"aria-describedby\", \"aria-disabled\", \"aria-dropeffect\", \"aria-expanded\", \"aria-flowto\", \"aria-grabbed\", \"aria-haspopup\", \"aria-hidden\", \"aria-invalid\", \"aria-label\", \"aria-labelledby\", \"aria-level\", \"aria-live\", \"aria-multiline\", \"aria-multiselectable\", \"aria-orientation\", \"aria-owns\", \"aria-posinset\", \"aria-pressed\", \"aria-readonly\", \"aria-relevant\", \"aria-required\", \"aria-selected\", \"aria-setsize\", \"aria-sort\", \"aria-valuemax\", \"aria-valuemin\", \"aria-valuenow\", \"aria-valuetext\", \"class\", \"content\", \"contenteditable\", \"contextmenu\", \"datatype\", \"dir\", \"draggable\", \"dropzone\", \"hidden\", \"hreflang\", \"id\", \"inlist\", \"itemid\", \"itemref\", \"itemscope\", \"itemtype\", \"lang\", \"media\", \"ns1:type\", \"ns2:alphabet\", \"ns2:ph\", \"onabort\", \"onblur\", \"oncanplay\", \"oncanplaythrough\", \"onchange\", \"onclick\", \"oncontextmenu\", \"ondblclick\", \"ondrag\", \"ondragend\", \"ondragenter\", \"ondragleave\", \"ondragover\", \"ondragstart\", \"ondrop\", \"ondurationchange\", \"onemptied\", \"onended\", \"onerror\", \"onfocus\", \"oninput\", \"oninvalid\", \"onkeydown\", \"onkeypress\", \"onkeyup\", \"onload\", \"onloadeddata\", \"onloadedmetadata\", \"onloadstart\", \"onmousedown\", \"onmousemove\", \"onmouseout\", \"onmouseover\", \"onmouseup\", \"onmousewheel\", \"onpause\", \"onplay\", \"onplaying\", \"onprogress\", \"onratechange\", \"onreadystatechange\", \"onreset\", \"onscroll\", \"onseeked\", \"onseeking\", \"onselect\", \"onshow\", \"onstalled\", \"onsubmit\", \"onsuspend\", \"ontimeupdate\", \"onvolumechange\", \"onwaiting\", \"prefix\", \"property\", \"rel\", \"resource\", \"rev\", \"role\", \"spellcheck\", \"style\", \"tabindex\", \"target\", \"title\", \"type\", \"typeof\", \"vocab\", \"xml:base\", \"xml:lang\", \"xml:space\", \"colspan\", \"rowspan\"];\n        allowedXhtml11Tags = [\"div\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"li\", \"dl\", \"dt\", \"dd\", \"address\", \"hr\", \"pre\", \"blockquote\", \"center\", \"ins\", \"del\", \"a\", \"span\", \"bdo\", \"br\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"bar\", \"cite\", \"abbr\", \"acronym\", \"q\", \"sub\", \"sup\", \"tt\", \"i\", \"b\", \"big\", \"small\", \"u\", \"s\", \"strike\", \"basefont\", \"font\", \"object\", \"param\", \"img\", \"table\", \"caption\", \"colgroup\", \"col\", \"thead\", \"tfoot\", \"tbody\", \"tr\", \"th\", \"td\", \"embed\", \"applet\", \"iframe\", \"img\", \"map\", \"noscript\", \"ns:svg\", \"object\", \"script\", \"table\", \"tt\", \"var\"];\n        content.data = entities.encodeXML(content.data);\n        $ = cheerio.load(content.data, {\n          lowerCaseTags: true,\n          ignoreWhitespace: true,\n          recognizeSelfClosing: true\n        });\n        if ($(\"body\").length) {\n          $ = cheerio.load($(\"body\").html(), {\n            lowerCaseTags: true,\n            ignoreWhitespace: true,\n            recognizeSelfClosing: true\n          });\n        }\n        $($(\"*\").get().reverse()).each(function(elemIndex, elem) {\n          var attrs, child, k, ref, ref1, that, v;\n          attrs = elem.attribs;\n          that = this;\n          if ((ref = that.name) === \"img\" || ref === \"br\" || ref === \"hr\") {\n            $(that).text(\"\");\n            if (that.name === \"img\") {\n              $(that).attr(\"alt\", $(that).attr(\"alt\") || \"image-placeholder\");\n            }\n          }\n          for (k in attrs) {\n            v = attrs[k];\n            if (indexOf.call(allowedAttributes, k) >= 0) {\n              if (k === \"type\") {\n                if (that.name !== \"script\") {\n                  $(that).removeAttr(k);\n                }\n              }\n            } else {\n              $(that).removeAttr(k);\n            }\n          }\n          if (self.options.version === 2) {\n            if (ref1 = that.name, indexOf.call(allowedXhtml11Tags, ref1) >= 0) {\n\n            } else {\n              console.log(\"Warning (content[\" + index + \"]):\", that.name, \"tag isn't allowed on EPUB 2/XHTML 1.1 DTD.\");\n              child = $(that).html();\n              return $(that).replaceWith($(\"<div>\" + child + \"</div>\"));\n            }\n          }\n        });\n        $(\"img\").each(function(index, elem) {\n          var dir, extension, id, mediaType, url;\n          url = $(elem).attr(\"src\");\n          id = uuid();\n          mediaType = mime.lookup(url);\n          extension = mime.extension(mediaType);\n          $(elem).attr(\"src\", \"images/\" + id + \".\" + extension);\n          dir = content.dir;\n          return self.options.images.push({\n            id: id,\n            url: url,\n            dir: dir,\n            mediaType: mediaType,\n            extension: extension\n          });\n        });\n        content.data = $.xml();\n        return content;\n      });\n      if (this.options.cover) {\n        this.options._coverMediaType = mime.lookup(this.options.cover);\n        this.options._coverExtension = mime.extension(this.options._coverMediaType);\n      }\n      this.render();\n      this.promise = this.defer.promise;\n    }\n\n    EPub.prototype.render = function() {\n      var self;\n      self = this;\n      console.log(\"Generating Template Files.....\");\n      return this.generateTempFile().then(function() {\n        console.log(\"Downloading Images...\");\n        return self.downloadAllImage().fin(function() {\n          console.log(\"Making Cover...\");\n          return self.makeCover().then(function() {\n            console.log(\"Generating Epub Files...\");\n            return self.genEpub().then(function(result) {\n              console.log(\"About to finish...\");\n              self.defer.resolve(result);\n              return console.log(\"Done.\");\n            }, function(err) {\n              return self.defer.reject(err);\n            });\n          }, function(err) {\n            return self.defer.reject(err);\n          });\n        }, function(err) {\n          return self.defer.reject(err);\n        });\n      }, function(err) {\n        return self.defer.reject(err);\n      });\n    };\n\n    EPub.prototype.generateTempFile = function() {\n      var base, generateDefer, htmlTocPath, ncxTocPath, opfPath, self;\n      generateDefer = new Q.defer();\n      self = this;\n      if (!fs.existsSync(this.options.tempDir)) {\n        fs.mkdirSync(this.options.tempDir);\n      }\n      fs.mkdirSync(this.uuid);\n      fs.mkdirSync(path.resolve(this.uuid, \"./OEBPS\"));\n      (base = this.options).css || (base.css = fs.readFileSync(path.resolve(__dirname, \"../templates/template.css\")));\n      fs.writeFileSync(path.resolve(this.uuid, \"./OEBPS/style.css\"), this.options.css);\n      if (self.options.fonts.length) {\n        fs.mkdirSync(path.resolve(this.uuid, \"./OEBPS/fonts\"));\n        this.options.fonts = _.map(this.options.fonts, function(font) {\n          var filename;\n          if (!fs.existsSync(font)) {\n            generateDefer.reject(new Error('Custom font not found at ' + font + '.'));\n            return generateDefer.promise;\n          }\n          filename = path.basename(font);\n          fsextra.copySync(font, path.resolve(self.uuid, \"./OEBPS/fonts/\" + filename));\n          return filename;\n        });\n      }\n      _.each(this.options.content, function(content) {\n        var data;\n        data = self.options.docHeader + \"\\n  <head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <title>\" + (entities.encodeXML(content.title || '')) + \"</title>\\n  <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\" />\\n  </head>\\n<body>\";\n        data += content.title && self.options.appendChapterTitles ? \"<h1>\" + (entities.encodeXML(content.title)) + \"</h1>\" : \"\";\n        data += content.title && content.author && content.author.length ? \"<p class='epub-author'>\" + (entities.encodeXML(content.author.join(\", \"))) + \"</p>\" : \"\";\n        data += content.title && content.url ? \"<p class='epub-link'><a href='\" + content.url + \"'>\" + content.url + \"</a></p>\" : \"\";\n        data += content.data + \"</body></html>\";\n        return fs.writeFileSync(content.filePath, data);\n      });\n      fs.writeFileSync(this.uuid + \"/mimetype\", \"application/epub+zip\");\n      fs.mkdirSync(this.uuid + \"/META-INF\");\n      fs.writeFileSync(this.uuid + \"/META-INF/container.xml\", \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?><container version=\\\"1.0\\\" xmlns=\\\"urn:oasis:names:tc:opendocument:xmlns:container\\\"><rootfiles><rootfile full-path=\\\"OEBPS/content.opf\\\" media-type=\\\"application/oebps-package+xml\\\"/></rootfiles></container>\");\n      if (self.options.version === 2) {\n        fs.writeFileSync(this.uuid + \"/META-INF/com.apple.ibooks.display-options.xml\", \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<display_options>\\n  <platform name=\\\"*\\\">\\n    <option name=\\\"specified-fonts\\\">true</option>\\n  </platform>\\n</display_options>\");\n      }\n      opfPath = self.options.customOpfTemplatePath || path.resolve(__dirname, \"../templates/epub\" + self.options.version + \"/content.opf.ejs\");\n      if (!fs.existsSync(opfPath)) {\n        generateDefer.reject(new Error('Custom file to OPF template not found.'));\n        return generateDefer.promise;\n      }\n      ncxTocPath = self.options.customNcxTocTemplatePath || path.resolve(__dirname, \"../templates/toc.ncx.ejs\");\n      if (!fs.existsSync(ncxTocPath)) {\n        generateDefer.reject(new Error('Custom file the NCX toc template not found.'));\n        return generateDefer.promise;\n      }\n      htmlTocPath = self.options.customHtmlTocTemplatePath || path.resolve(__dirname, \"../templates/epub\" + self.options.version + \"/toc.xhtml.ejs\");\n      if (!fs.existsSync(htmlTocPath)) {\n        generateDefer.reject(new Error('Custom file to HTML toc template not found.'));\n        return generateDefer.promise;\n      }\n      Q.all([Q.nfcall(ejs.renderFile, opfPath, self.options), Q.nfcall(ejs.renderFile, ncxTocPath, self.options), Q.nfcall(ejs.renderFile, htmlTocPath, self.options)]).spread(function(data1, data2, data3) {\n        fs.writeFileSync(path.resolve(self.uuid, \"./OEBPS/content.opf\"), data1);\n        fs.writeFileSync(path.resolve(self.uuid, \"./OEBPS/toc.ncx\"), data2);\n        fs.writeFileSync(path.resolve(self.uuid, \"./OEBPS/toc.xhtml\"), data3);\n        return generateDefer.resolve();\n      }, function(err) {\n        console.error(arguments);\n        return generateDefer.reject(err);\n      });\n      return generateDefer.promise;\n    };\n\n    EPub.prototype.makeCover = function() {\n      var coverDefer, destPath, userAgent, writeStream;\n      userAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36\";\n      coverDefer = new Q.defer();\n      if (this.options.cover) {\n        destPath = path.resolve(this.uuid, \"./OEBPS/cover.\" + this.options._coverExtension);\n        writeStream = null;\n        if (this.options.cover.slice(0, 4) === \"http\") {\n          writeStream = request.get(this.options.cover).set({\n            'User-Agent': userAgent\n          });\n          writeStream.pipe(fs.createWriteStream(destPath));\n        } else {\n          writeStream = fs.createReadStream(this.options.cover);\n          writeStream.pipe(fs.createWriteStream(destPath));\n        }\n        writeStream.on(\"end\", function() {\n          console.log(\"[Success] cover image downloaded successfully!\");\n          return coverDefer.resolve();\n        });\n        writeStream.on(\"error\", function(err) {\n          console.error(\"Error\", err);\n          return coverDefer.reject(err);\n        });\n      } else {\n        coverDefer.resolve();\n      }\n      return coverDefer.promise;\n    };\n\n    EPub.prototype.downloadImage = function(options) {\n      var auxpath, downloadImageDefer, filename, requestAction, self, userAgent;\n      self = this;\n      userAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36\";\n      if (!options.url && typeof options !== \"string\") {\n        return false;\n      }\n      downloadImageDefer = new Q.defer();\n      filename = path.resolve(self.uuid, \"./OEBPS/images/\" + options.id + \".\" + options.extension);\n      if (options.url.indexOf(\"file://\") === 0) {\n        auxpath = options.url.substr(7);\n        fsextra.copySync(auxpath, filename);\n        return downloadImageDefer.resolve(options);\n      } else {\n        if (options.url.indexOf(\"http\") === 0) {\n          requestAction = request.get(options.url).set({\n            'User-Agent': userAgent\n          });\n          requestAction.pipe(fs.createWriteStream(filename));\n        } else {\n          requestAction = fs.createReadStream(path.resolve(options.dir, options.url));\n          requestAction.pipe(fs.createWriteStream(filename));\n        }\n        requestAction.on('error', function(err) {\n          console.error('[Download Error]', 'Error while downloading', options.url, err);\n          fs.unlinkSync(filename);\n          return downloadImageDefer.reject(err);\n        });\n        requestAction.on('end', function() {\n          console.log(\"[Download Success]\", options.url);\n          return downloadImageDefer.resolve(options);\n        });\n        return downloadImageDefer.promise;\n      }\n    };\n\n    EPub.prototype.downloadAllImage = function() {\n      var deferArray, imgDefer, self;\n      self = this;\n      imgDefer = new Q.defer();\n      if (!self.options.images.length) {\n        imgDefer.resolve();\n      } else {\n        fs.mkdirSync(path.resolve(this.uuid, \"./OEBPS/images\"));\n        deferArray = [];\n        _.each(self.options.images, function(image) {\n          return deferArray.push(self.downloadImage(image));\n        });\n        Q.all(deferArray).fin(function() {\n          return imgDefer.resolve();\n        });\n      }\n      return imgDefer.promise;\n    };\n\n    EPub.prototype.genEpub = function() {\n      var archive, cwd, genDefer, output, self;\n      genDefer = new Q.defer();\n      self = this;\n      cwd = this.uuid;\n      archive = archiver(\"zip\", {\n        zlib: {\n          level: 9\n        }\n      });\n      output = fs.createWriteStream(self.options.output);\n      console.log(\"Zipping temp dir to\", self.options.output);\n      archive.file(cwd + \"/mimetype\", {\n        store: true,\n        name: \"mimetype\"\n      });\n      archive.directory(cwd + \"/META-INF\", \"META-INF\");\n      archive.directory(cwd + \"/OEBPS\", \"OEBPS\");\n      archive.pipe(output);\n      archive.on(\"end\", function() {\n        console.log(\"Done zipping, clearing temp dir...\");\n        return rimraf(cwd, function(err) {\n          if (err) {\n            return genDefer.reject(err);\n          } else {\n            return genDefer.resolve();\n          }\n        });\n      });\n      archive.on(\"error\", function(err) {\n        return genDefer.reject(err);\n      });\n      archive.finalize();\n      return genDefer.promise;\n    };\n\n    return EPub;\n\n  })();\n\n  module.exports = EPub;\n\n}).call(this);\n"}